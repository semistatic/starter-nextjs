/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/NWWSWarnHist": {
    get: {
      parameters: {
        query: {
          guid?: parameters["rowFilter.NWWSWarnHist.guid"];
          id?: parameters["rowFilter.NWWSWarnHist.id"];
          wmocode?: parameters["rowFilter.NWWSWarnHist.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarnHist.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarnHist.awipsid"];
          body?: parameters["rowFilter.NWWSWarnHist.body"];
          whenadded?: parameters["rowFilter.NWWSWarnHist.whenadded"];
          zones?: parameters["rowFilter.NWWSWarnHist.zones"];
          significance?: parameters["rowFilter.NWWSWarnHist.significance"];
          action?: parameters["rowFilter.NWWSWarnHist.action"];
          pp?: parameters["rowFilter.NWWSWarnHist.pp"];
          expires?: parameters["rowFilter.NWWSWarnHist.expires"];
          etn?: parameters["rowFilter.NWWSWarnHist.etn"];
          tormod?: parameters["rowFilter.NWWSWarnHist.tormod"];
          isactive?: parameters["rowFilter.NWWSWarnHist.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarnHist.zonestring"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWWSWarnHist"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWWSWarnHist */
          NWWSWarnHist?: definitions["NWWSWarnHist"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          guid?: parameters["rowFilter.NWWSWarnHist.guid"];
          id?: parameters["rowFilter.NWWSWarnHist.id"];
          wmocode?: parameters["rowFilter.NWWSWarnHist.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarnHist.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarnHist.awipsid"];
          body?: parameters["rowFilter.NWWSWarnHist.body"];
          whenadded?: parameters["rowFilter.NWWSWarnHist.whenadded"];
          zones?: parameters["rowFilter.NWWSWarnHist.zones"];
          significance?: parameters["rowFilter.NWWSWarnHist.significance"];
          action?: parameters["rowFilter.NWWSWarnHist.action"];
          pp?: parameters["rowFilter.NWWSWarnHist.pp"];
          expires?: parameters["rowFilter.NWWSWarnHist.expires"];
          etn?: parameters["rowFilter.NWWSWarnHist.etn"];
          tormod?: parameters["rowFilter.NWWSWarnHist.tormod"];
          isactive?: parameters["rowFilter.NWWSWarnHist.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarnHist.zonestring"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          guid?: parameters["rowFilter.NWWSWarnHist.guid"];
          id?: parameters["rowFilter.NWWSWarnHist.id"];
          wmocode?: parameters["rowFilter.NWWSWarnHist.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarnHist.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarnHist.awipsid"];
          body?: parameters["rowFilter.NWWSWarnHist.body"];
          whenadded?: parameters["rowFilter.NWWSWarnHist.whenadded"];
          zones?: parameters["rowFilter.NWWSWarnHist.zones"];
          significance?: parameters["rowFilter.NWWSWarnHist.significance"];
          action?: parameters["rowFilter.NWWSWarnHist.action"];
          pp?: parameters["rowFilter.NWWSWarnHist.pp"];
          expires?: parameters["rowFilter.NWWSWarnHist.expires"];
          etn?: parameters["rowFilter.NWWSWarnHist.etn"];
          tormod?: parameters["rowFilter.NWWSWarnHist.tormod"];
          isactive?: parameters["rowFilter.NWWSWarnHist.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarnHist.zonestring"];
        };
        body: {
          /** NWWSWarnHist */
          NWWSWarnHist?: definitions["NWWSWarnHist"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/NWWSphenomena": {
    get: {
      parameters: {
        query: {
          ppcode?: parameters["rowFilter.NWWSphenomena.ppcode"];
          ppdesc?: parameters["rowFilter.NWWSphenomena.ppdesc"];
          "wi-code"?: parameters["rowFilter.NWWSphenomena.wi-code"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWWSphenomena"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWWSphenomena */
          NWWSphenomena?: definitions["NWWSphenomena"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ppcode?: parameters["rowFilter.NWWSphenomena.ppcode"];
          ppdesc?: parameters["rowFilter.NWWSphenomena.ppdesc"];
          "wi-code"?: parameters["rowFilter.NWWSphenomena.wi-code"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ppcode?: parameters["rowFilter.NWWSphenomena.ppcode"];
          ppdesc?: parameters["rowFilter.NWWSphenomena.ppdesc"];
          "wi-code"?: parameters["rowFilter.NWWSphenomena.wi-code"];
        };
        body: {
          /** NWWSphenomena */
          NWWSphenomena?: definitions["NWWSphenomena"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/NWWSWarn": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.NWWSWarn.id"];
          wmocode?: parameters["rowFilter.NWWSWarn.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarn.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarn.awipsid"];
          body?: parameters["rowFilter.NWWSWarn.body"];
          whenadded?: parameters["rowFilter.NWWSWarn.whenadded"];
          zones?: parameters["rowFilter.NWWSWarn.zones"];
          significance?: parameters["rowFilter.NWWSWarn.significance"];
          action?: parameters["rowFilter.NWWSWarn.action"];
          pp?: parameters["rowFilter.NWWSWarn.pp"];
          expires?: parameters["rowFilter.NWWSWarn.expires"];
          etn?: parameters["rowFilter.NWWSWarn.etn"];
          tormod?: parameters["rowFilter.NWWSWarn.tormod"];
          isactive?: parameters["rowFilter.NWWSWarn.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarn.zonestring"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWWSWarn"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWWSWarn */
          NWWSWarn?: definitions["NWWSWarn"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.NWWSWarn.id"];
          wmocode?: parameters["rowFilter.NWWSWarn.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarn.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarn.awipsid"];
          body?: parameters["rowFilter.NWWSWarn.body"];
          whenadded?: parameters["rowFilter.NWWSWarn.whenadded"];
          zones?: parameters["rowFilter.NWWSWarn.zones"];
          significance?: parameters["rowFilter.NWWSWarn.significance"];
          action?: parameters["rowFilter.NWWSWarn.action"];
          pp?: parameters["rowFilter.NWWSWarn.pp"];
          expires?: parameters["rowFilter.NWWSWarn.expires"];
          etn?: parameters["rowFilter.NWWSWarn.etn"];
          tormod?: parameters["rowFilter.NWWSWarn.tormod"];
          isactive?: parameters["rowFilter.NWWSWarn.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarn.zonestring"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.NWWSWarn.id"];
          wmocode?: parameters["rowFilter.NWWSWarn.wmocode"];
          cccc?: parameters["rowFilter.NWWSWarn.cccc"];
          awipsid?: parameters["rowFilter.NWWSWarn.awipsid"];
          body?: parameters["rowFilter.NWWSWarn.body"];
          whenadded?: parameters["rowFilter.NWWSWarn.whenadded"];
          zones?: parameters["rowFilter.NWWSWarn.zones"];
          significance?: parameters["rowFilter.NWWSWarn.significance"];
          action?: parameters["rowFilter.NWWSWarn.action"];
          pp?: parameters["rowFilter.NWWSWarn.pp"];
          expires?: parameters["rowFilter.NWWSWarn.expires"];
          etn?: parameters["rowFilter.NWWSWarn.etn"];
          tormod?: parameters["rowFilter.NWWSWarn.tormod"];
          isactive?: parameters["rowFilter.NWWSWarn.isactive"];
          zonestring?: parameters["rowFilter.NWWSWarn.zonestring"];
        };
        body: {
          /** NWWSWarn */
          NWWSWarn?: definitions["NWWSWarn"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/us_zipcode": {
    get: {
      parameters: {
        query: {
          zipcode?: parameters["rowFilter.us_zipcode.zipcode"];
          lat?: parameters["rowFilter.us_zipcode.lat"];
          lon?: parameters["rowFilter.us_zipcode.lon"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["us_zipcode"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** us_zipcode */
          us_zipcode?: definitions["us_zipcode"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          zipcode?: parameters["rowFilter.us_zipcode.zipcode"];
          lat?: parameters["rowFilter.us_zipcode.lat"];
          lon?: parameters["rowFilter.us_zipcode.lon"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          zipcode?: parameters["rowFilter.us_zipcode.zipcode"];
          lat?: parameters["rowFilter.us_zipcode.lat"];
          lon?: parameters["rowFilter.us_zipcode.lon"];
        };
        body: {
          /** us_zipcode */
          us_zipcode?: definitions["us_zipcode"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/messages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          username?: parameters["rowFilter.messages.username"];
          text?: parameters["rowFilter.messages.text"];
          country?: parameters["rowFilter.messages.country"];
          is_authenticated?: parameters["rowFilter.messages.is_authenticated"];
          timestamp?: parameters["rowFilter.messages.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          username?: parameters["rowFilter.messages.username"];
          text?: parameters["rowFilter.messages.text"];
          country?: parameters["rowFilter.messages.country"];
          is_authenticated?: parameters["rowFilter.messages.is_authenticated"];
          timestamp?: parameters["rowFilter.messages.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          username?: parameters["rowFilter.messages.username"];
          text?: parameters["rowFilter.messages.text"];
          country?: parameters["rowFilter.messages.country"];
          is_authenticated?: parameters["rowFilter.messages.is_authenticated"];
          timestamp?: parameters["rowFilter.messages.timestamp"];
        };
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/NWSZones": {
    get: {
      parameters: {
        query: {
          zoneid?: parameters["rowFilter.NWSZones.zoneid"];
          zonelabel?: parameters["rowFilter.NWSZones.zonelabel"];
          zonestate?: parameters["rowFilter.NWSZones.zonestate"];
          zoneCWA?: parameters["rowFilter.NWSZones.zoneCWA"];
          zoneTZ?: parameters["rowFilter.NWSZones.zoneTZ"];
          zoneFIPS?: parameters["rowFilter.NWSZones.zoneFIPS"];
          zoneCenterLat?: parameters["rowFilter.NWSZones.zoneCenterLat"];
          zoneCenterLon?: parameters["rowFilter.NWSZones.zoneCenterLon"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWSZones"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWSZones */
          NWSZones?: definitions["NWSZones"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          zoneid?: parameters["rowFilter.NWSZones.zoneid"];
          zonelabel?: parameters["rowFilter.NWSZones.zonelabel"];
          zonestate?: parameters["rowFilter.NWSZones.zonestate"];
          zoneCWA?: parameters["rowFilter.NWSZones.zoneCWA"];
          zoneTZ?: parameters["rowFilter.NWSZones.zoneTZ"];
          zoneFIPS?: parameters["rowFilter.NWSZones.zoneFIPS"];
          zoneCenterLat?: parameters["rowFilter.NWSZones.zoneCenterLat"];
          zoneCenterLon?: parameters["rowFilter.NWSZones.zoneCenterLon"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          zoneid?: parameters["rowFilter.NWSZones.zoneid"];
          zonelabel?: parameters["rowFilter.NWSZones.zonelabel"];
          zonestate?: parameters["rowFilter.NWSZones.zonestate"];
          zoneCWA?: parameters["rowFilter.NWSZones.zoneCWA"];
          zoneTZ?: parameters["rowFilter.NWSZones.zoneTZ"];
          zoneFIPS?: parameters["rowFilter.NWSZones.zoneFIPS"];
          zoneCenterLat?: parameters["rowFilter.NWSZones.zoneCenterLat"];
          zoneCenterLon?: parameters["rowFilter.NWSZones.zoneCenterLon"];
        };
        body: {
          /** NWSZones */
          NWSZones?: definitions["NWSZones"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/NWWSsignificance": {
    get: {
      parameters: {
        query: {
          sCode?: parameters["rowFilter.NWWSsignificance.sCode"];
          sDesc?: parameters["rowFilter.NWWSsignificance.sDesc"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWWSsignificance"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWWSsignificance */
          NWWSsignificance?: definitions["NWWSsignificance"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          sCode?: parameters["rowFilter.NWWSsignificance.sCode"];
          sDesc?: parameters["rowFilter.NWWSsignificance.sDesc"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          sCode?: parameters["rowFilter.NWWSsignificance.sCode"];
          sDesc?: parameters["rowFilter.NWWSsignificance.sDesc"];
        };
        body: {
          /** NWWSsignificance */
          NWWSsignificance?: definitions["NWWSsignificance"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/us_states": {
    get: {
      parameters: {
        query: {
          STATEFP?: parameters["rowFilter.us_states.STATEFP"];
          STUSPS?: parameters["rowFilter.us_states.STUSPS"];
          STATENAME?: parameters["rowFilter.us_states.STATENAME"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["us_states"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** us_states */
          us_states?: definitions["us_states"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          STATEFP?: parameters["rowFilter.us_states.STATEFP"];
          STUSPS?: parameters["rowFilter.us_states.STUSPS"];
          STATENAME?: parameters["rowFilter.us_states.STATENAME"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          STATEFP?: parameters["rowFilter.us_states.STATEFP"];
          STUSPS?: parameters["rowFilter.us_states.STUSPS"];
          STATENAME?: parameters["rowFilter.us_states.STATENAME"];
        };
        body: {
          /** us_states */
          us_states?: definitions["us_states"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/us_counties": {
    get: {
      parameters: {
        query: {
          geoid?: parameters["rowFilter.us_counties.geoid"];
          geom?: parameters["rowFilter.us_counties.geom"];
          statefp?: parameters["rowFilter.us_counties.statefp"];
          countyfp?: parameters["rowFilter.us_counties.countyfp"];
          countyns?: parameters["rowFilter.us_counties.countyns"];
          name?: parameters["rowFilter.us_counties.name"];
          namelsad?: parameters["rowFilter.us_counties.namelsad"];
          lsad?: parameters["rowFilter.us_counties.lsad"];
          classfp?: parameters["rowFilter.us_counties.classfp"];
          mtfcc?: parameters["rowFilter.us_counties.mtfcc"];
          csafp?: parameters["rowFilter.us_counties.csafp"];
          cbsafp?: parameters["rowFilter.us_counties.cbsafp"];
          metdivfp?: parameters["rowFilter.us_counties.metdivfp"];
          funcstat?: parameters["rowFilter.us_counties.funcstat"];
          aland?: parameters["rowFilter.us_counties.aland"];
          awater?: parameters["rowFilter.us_counties.awater"];
          intptlat?: parameters["rowFilter.us_counties.intptlat"];
          intptlon?: parameters["rowFilter.us_counties.intptlon"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["us_counties"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** us_counties */
          us_counties?: definitions["us_counties"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          geoid?: parameters["rowFilter.us_counties.geoid"];
          geom?: parameters["rowFilter.us_counties.geom"];
          statefp?: parameters["rowFilter.us_counties.statefp"];
          countyfp?: parameters["rowFilter.us_counties.countyfp"];
          countyns?: parameters["rowFilter.us_counties.countyns"];
          name?: parameters["rowFilter.us_counties.name"];
          namelsad?: parameters["rowFilter.us_counties.namelsad"];
          lsad?: parameters["rowFilter.us_counties.lsad"];
          classfp?: parameters["rowFilter.us_counties.classfp"];
          mtfcc?: parameters["rowFilter.us_counties.mtfcc"];
          csafp?: parameters["rowFilter.us_counties.csafp"];
          cbsafp?: parameters["rowFilter.us_counties.cbsafp"];
          metdivfp?: parameters["rowFilter.us_counties.metdivfp"];
          funcstat?: parameters["rowFilter.us_counties.funcstat"];
          aland?: parameters["rowFilter.us_counties.aland"];
          awater?: parameters["rowFilter.us_counties.awater"];
          intptlat?: parameters["rowFilter.us_counties.intptlat"];
          intptlon?: parameters["rowFilter.us_counties.intptlon"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          geoid?: parameters["rowFilter.us_counties.geoid"];
          geom?: parameters["rowFilter.us_counties.geom"];
          statefp?: parameters["rowFilter.us_counties.statefp"];
          countyfp?: parameters["rowFilter.us_counties.countyfp"];
          countyns?: parameters["rowFilter.us_counties.countyns"];
          name?: parameters["rowFilter.us_counties.name"];
          namelsad?: parameters["rowFilter.us_counties.namelsad"];
          lsad?: parameters["rowFilter.us_counties.lsad"];
          classfp?: parameters["rowFilter.us_counties.classfp"];
          mtfcc?: parameters["rowFilter.us_counties.mtfcc"];
          csafp?: parameters["rowFilter.us_counties.csafp"];
          cbsafp?: parameters["rowFilter.us_counties.cbsafp"];
          metdivfp?: parameters["rowFilter.us_counties.metdivfp"];
          funcstat?: parameters["rowFilter.us_counties.funcstat"];
          aland?: parameters["rowFilter.us_counties.aland"];
          awater?: parameters["rowFilter.us_counties.awater"];
          intptlat?: parameters["rowFilter.us_counties.intptlat"];
          intptlon?: parameters["rowFilter.us_counties.intptlon"];
        };
        body: {
          /** us_counties */
          us_counties?: definitions["us_counties"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/countiesnew": {
    get: {
      parameters: {
        query: {
          stateAbbr?: parameters["rowFilter.countiesnew.stateAbbr"];
          WFO?: parameters["rowFilter.countiesnew.WFO"];
          countyName?: parameters["rowFilter.countiesnew.countyName"];
          countyID?: parameters["rowFilter.countiesnew.countyID"];
          countyTZ?: parameters["rowFilter.countiesnew.countyTZ"];
          centroidLON?: parameters["rowFilter.countiesnew.centroidLON"];
          centroidLAT?: parameters["rowFilter.countiesnew.centroidLAT"];
          countyPoints?: parameters["rowFilter.countiesnew.countyPoints"];
          id?: parameters["rowFilter.countiesnew.id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["countiesnew"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** countiesnew */
          countiesnew?: definitions["countiesnew"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          stateAbbr?: parameters["rowFilter.countiesnew.stateAbbr"];
          WFO?: parameters["rowFilter.countiesnew.WFO"];
          countyName?: parameters["rowFilter.countiesnew.countyName"];
          countyID?: parameters["rowFilter.countiesnew.countyID"];
          countyTZ?: parameters["rowFilter.countiesnew.countyTZ"];
          centroidLON?: parameters["rowFilter.countiesnew.centroidLON"];
          centroidLAT?: parameters["rowFilter.countiesnew.centroidLAT"];
          countyPoints?: parameters["rowFilter.countiesnew.countyPoints"];
          id?: parameters["rowFilter.countiesnew.id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          stateAbbr?: parameters["rowFilter.countiesnew.stateAbbr"];
          WFO?: parameters["rowFilter.countiesnew.WFO"];
          countyName?: parameters["rowFilter.countiesnew.countyName"];
          countyID?: parameters["rowFilter.countiesnew.countyID"];
          countyTZ?: parameters["rowFilter.countiesnew.countyTZ"];
          centroidLON?: parameters["rowFilter.countiesnew.centroidLON"];
          centroidLAT?: parameters["rowFilter.countiesnew.centroidLAT"];
          countyPoints?: parameters["rowFilter.countiesnew.countyPoints"];
          id?: parameters["rowFilter.countiesnew.id"];
        };
        body: {
          /** countiesnew */
          countiesnew?: definitions["countiesnew"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/NWWSWarnPriority": {
    get: {
      parameters: {
        query: {
          Priority?: parameters["rowFilter.NWWSWarnPriority.Priority"];
          ppcode?: parameters["rowFilter.NWWSWarnPriority.ppcode"];
          svcode?: parameters["rowFilter.NWWSWarnPriority.svcode"];
          modifier?: parameters["rowFilter.NWWSWarnPriority.modifier"];
          pcolor?: parameters["rowFilter.NWWSWarnPriority.pcolor"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["NWWSWarnPriority"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** NWWSWarnPriority */
          NWWSWarnPriority?: definitions["NWWSWarnPriority"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          Priority?: parameters["rowFilter.NWWSWarnPriority.Priority"];
          ppcode?: parameters["rowFilter.NWWSWarnPriority.ppcode"];
          svcode?: parameters["rowFilter.NWWSWarnPriority.svcode"];
          modifier?: parameters["rowFilter.NWWSWarnPriority.modifier"];
          pcolor?: parameters["rowFilter.NWWSWarnPriority.pcolor"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          Priority?: parameters["rowFilter.NWWSWarnPriority.Priority"];
          ppcode?: parameters["rowFilter.NWWSWarnPriority.ppcode"];
          svcode?: parameters["rowFilter.NWWSWarnPriority.svcode"];
          modifier?: parameters["rowFilter.NWWSWarnPriority.modifier"];
          pcolor?: parameters["rowFilter.NWWSWarnPriority.pcolor"];
        };
        body: {
          /** NWWSWarnPriority */
          NWWSWarnPriority?: definitions["NWWSWarnPriority"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/funcGeoAPI": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: numeric */
            lat: number;
            /** Format: numeric */
            lon: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/doDashWarnCount": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  NWWSWarnHist: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    guid: string;
    /** Format: numeric */
    id: number;
    /** Format: character */
    wmocode?: string;
    /** Format: character */
    cccc: string;
    /** Format: character varying */
    awipsid?: string;
    /** Format: text */
    body?: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    whenadded?: string;
    /** Format: text */
    zones?: string;
    /** Format: character */
    significance: string;
    /** Format: character */
    action: string;
    /** Format: character */
    pp: string;
    /** Format: timestamp with time zone */
    expires?: string;
    /** Format: character */
    etn: string;
    /** Format: character varying */
    tormod?: string;
    /**
     * Format: boolean
     * @default true
     */
    isactive?: boolean;
    /** Format: json */
    zonestring?: unknown;
  };
  NWWSphenomena: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    ppcode: string;
    /** Format: character varying */
    ppdesc?: string;
    /** Format: character varying */
    "wi-code"?: string;
  };
  NWWSWarn: {
    /** Format: numeric */
    id: number;
    /** Format: character */
    wmocode?: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    cccc: string;
    /** Format: character varying */
    awipsid?: string;
    /** Format: text */
    body?: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    whenadded?: string;
    /** Format: text */
    zones?: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    significance: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    action: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    pp: string;
    /** Format: timestamp with time zone */
    expires?: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    etn: string;
    /** Format: character varying */
    tormod?: string;
    /**
     * Format: boolean
     * @default true
     */
    isactive?: boolean;
    /** Format: json */
    zonestring?: unknown;
  };
  us_zipcode: {
    /**
     * Format: numeric
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    zipcode: number;
    /** Format: numeric */
    lat: number;
    /** Format: numeric */
    lon: number;
  };
  messages: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    username: string;
    /** Format: text */
    text: string;
    /** Format: character varying */
    country?: string;
    /**
     * Format: boolean
     * @default false
     */
    is_authenticated?: boolean;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    timestamp: string;
  };
  NWSZones: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    zoneid: string;
    /** Format: text */
    zonelabel?: string;
    /** Format: character varying */
    zonestate?: string;
    /** Format: character varying */
    zoneCWA?: string;
    /** Format: character varying */
    zoneTZ?: string;
    /** Format: character varying */
    zoneFIPS?: string;
    /** Format: character varying */
    zoneCenterLat?: string;
    /** Format: character varying */
    zoneCenterLon?: string;
  };
  NWWSsignificance: {
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    sCode: string;
    /** Format: character varying */
    sDesc?: string;
  };
  us_states: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    STATEFP: string;
    /** Format: character */
    STUSPS: string;
    /** Format: character varying */
    STATENAME: string;
  };
  us_counties: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    geoid: string;
    /** Format: extensions.geometry(MultiPolygon,4326) */
    geom?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `us_states.STATEFP`.<fk table='us_states' column='STATEFP'/>
     */
    statefp?: string;
    /** Format: character varying */
    countyfp?: string;
    /** Format: character varying */
    countyns?: string;
    /** Format: character varying */
    name?: string;
    /** Format: character varying */
    namelsad?: string;
    /** Format: character varying */
    lsad?: string;
    /** Format: character varying */
    classfp?: string;
    /** Format: character varying */
    mtfcc?: string;
    /** Format: character varying */
    csafp?: string;
    /** Format: character varying */
    cbsafp?: string;
    /** Format: character varying */
    metdivfp?: string;
    /** Format: character varying */
    funcstat?: string;
    /** Format: bigint */
    aland?: number;
    /** Format: bigint */
    awater?: number;
    /** Format: character varying */
    intptlat?: string;
    /** Format: character varying */
    intptlon?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
  };
  countiesnew: {
    /** Format: character varying */
    stateAbbr?: string;
    /** Format: character varying */
    WFO?: string;
    /** Format: character varying */
    countyName?: string;
    /** Format: numeric */
    countyID?: number;
    /** Format: character varying */
    countyTZ?: string;
    /** Format: numeric */
    centroidLON?: number;
    /** Format: numeric */
    centroidLAT?: number;
    /** Format: text */
    countyPoints?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
  };
  NWWSWarnPriority: {
    /** Format: integer */
    Priority: number;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `NWWSphenomena.ppcode`.<fk table='NWWSphenomena' column='ppcode'/>
     */
    ppcode: string;
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    svcode: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    modifier: string;
    /** Format: character */
    pcolor?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description NWWSWarnHist */
  "body.NWWSWarnHist": definitions["NWWSWarnHist"];
  /** Format: uuid */
  "rowFilter.NWWSWarnHist.guid": string;
  /** Format: numeric */
  "rowFilter.NWWSWarnHist.id": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.wmocode": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.cccc": string;
  /** Format: character varying */
  "rowFilter.NWWSWarnHist.awipsid": string;
  /** Format: text */
  "rowFilter.NWWSWarnHist.body": string;
  /** Format: timestamp with time zone */
  "rowFilter.NWWSWarnHist.whenadded": string;
  /** Format: text */
  "rowFilter.NWWSWarnHist.zones": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.significance": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.action": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.pp": string;
  /** Format: timestamp with time zone */
  "rowFilter.NWWSWarnHist.expires": string;
  /** Format: character */
  "rowFilter.NWWSWarnHist.etn": string;
  /** Format: character varying */
  "rowFilter.NWWSWarnHist.tormod": string;
  /** Format: boolean */
  "rowFilter.NWWSWarnHist.isactive": string;
  /** Format: json */
  "rowFilter.NWWSWarnHist.zonestring": string;
  /** @description NWWSphenomena */
  "body.NWWSphenomena": definitions["NWWSphenomena"];
  /** Format: character varying */
  "rowFilter.NWWSphenomena.ppcode": string;
  /** Format: character varying */
  "rowFilter.NWWSphenomena.ppdesc": string;
  /** Format: character varying */
  "rowFilter.NWWSphenomena.wi-code": string;
  /** @description NWWSWarn */
  "body.NWWSWarn": definitions["NWWSWarn"];
  /** Format: numeric */
  "rowFilter.NWWSWarn.id": string;
  /** Format: character */
  "rowFilter.NWWSWarn.wmocode": string;
  /** Format: character */
  "rowFilter.NWWSWarn.cccc": string;
  /** Format: character varying */
  "rowFilter.NWWSWarn.awipsid": string;
  /** Format: text */
  "rowFilter.NWWSWarn.body": string;
  /** Format: timestamp with time zone */
  "rowFilter.NWWSWarn.whenadded": string;
  /** Format: text */
  "rowFilter.NWWSWarn.zones": string;
  /** Format: character */
  "rowFilter.NWWSWarn.significance": string;
  /** Format: character */
  "rowFilter.NWWSWarn.action": string;
  /** Format: character */
  "rowFilter.NWWSWarn.pp": string;
  /** Format: timestamp with time zone */
  "rowFilter.NWWSWarn.expires": string;
  /** Format: character */
  "rowFilter.NWWSWarn.etn": string;
  /** Format: character varying */
  "rowFilter.NWWSWarn.tormod": string;
  /** Format: boolean */
  "rowFilter.NWWSWarn.isactive": string;
  /** Format: json */
  "rowFilter.NWWSWarn.zonestring": string;
  /** @description us_zipcode */
  "body.us_zipcode": definitions["us_zipcode"];
  /** Format: numeric */
  "rowFilter.us_zipcode.zipcode": string;
  /** Format: numeric */
  "rowFilter.us_zipcode.lat": string;
  /** Format: numeric */
  "rowFilter.us_zipcode.lon": string;
  /** @description messages */
  "body.messages": definitions["messages"];
  /** Format: bigint */
  "rowFilter.messages.id": string;
  /** Format: character varying */
  "rowFilter.messages.username": string;
  /** Format: text */
  "rowFilter.messages.text": string;
  /** Format: character varying */
  "rowFilter.messages.country": string;
  /** Format: boolean */
  "rowFilter.messages.is_authenticated": string;
  /** Format: timestamp without time zone */
  "rowFilter.messages.timestamp": string;
  /** @description NWSZones */
  "body.NWSZones": definitions["NWSZones"];
  /** Format: character varying */
  "rowFilter.NWSZones.zoneid": string;
  /** Format: text */
  "rowFilter.NWSZones.zonelabel": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zonestate": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zoneCWA": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zoneTZ": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zoneFIPS": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zoneCenterLat": string;
  /** Format: character varying */
  "rowFilter.NWSZones.zoneCenterLon": string;
  /** @description NWWSsignificance */
  "body.NWWSsignificance": definitions["NWWSsignificance"];
  /** Format: character */
  "rowFilter.NWWSsignificance.sCode": string;
  /** Format: character varying */
  "rowFilter.NWWSsignificance.sDesc": string;
  /** @description us_states */
  "body.us_states": definitions["us_states"];
  /** Format: character varying */
  "rowFilter.us_states.STATEFP": string;
  /** Format: character */
  "rowFilter.us_states.STUSPS": string;
  /** Format: character varying */
  "rowFilter.us_states.STATENAME": string;
  /** @description us_counties */
  "body.us_counties": definitions["us_counties"];
  /** Format: character varying */
  "rowFilter.us_counties.geoid": string;
  /** Format: extensions.geometry(MultiPolygon,4326) */
  "rowFilter.us_counties.geom": string;
  /** Format: character varying */
  "rowFilter.us_counties.statefp": string;
  /** Format: character varying */
  "rowFilter.us_counties.countyfp": string;
  /** Format: character varying */
  "rowFilter.us_counties.countyns": string;
  /** Format: character varying */
  "rowFilter.us_counties.name": string;
  /** Format: character varying */
  "rowFilter.us_counties.namelsad": string;
  /** Format: character varying */
  "rowFilter.us_counties.lsad": string;
  /** Format: character varying */
  "rowFilter.us_counties.classfp": string;
  /** Format: character varying */
  "rowFilter.us_counties.mtfcc": string;
  /** Format: character varying */
  "rowFilter.us_counties.csafp": string;
  /** Format: character varying */
  "rowFilter.us_counties.cbsafp": string;
  /** Format: character varying */
  "rowFilter.us_counties.metdivfp": string;
  /** Format: character varying */
  "rowFilter.us_counties.funcstat": string;
  /** Format: bigint */
  "rowFilter.us_counties.aland": string;
  /** Format: bigint */
  "rowFilter.us_counties.awater": string;
  /** Format: character varying */
  "rowFilter.us_counties.intptlat": string;
  /** Format: character varying */
  "rowFilter.us_counties.intptlon": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /** @description countiesnew */
  "body.countiesnew": definitions["countiesnew"];
  /** Format: character varying */
  "rowFilter.countiesnew.stateAbbr": string;
  /** Format: character varying */
  "rowFilter.countiesnew.WFO": string;
  /** Format: character varying */
  "rowFilter.countiesnew.countyName": string;
  /** Format: numeric */
  "rowFilter.countiesnew.countyID": string;
  /** Format: character varying */
  "rowFilter.countiesnew.countyTZ": string;
  /** Format: numeric */
  "rowFilter.countiesnew.centroidLON": string;
  /** Format: numeric */
  "rowFilter.countiesnew.centroidLAT": string;
  /** Format: text */
  "rowFilter.countiesnew.countyPoints": string;
  /** Format: uuid */
  "rowFilter.countiesnew.id": string;
  /** @description NWWSWarnPriority */
  "body.NWWSWarnPriority": definitions["NWWSWarnPriority"];
  /** Format: integer */
  "rowFilter.NWWSWarnPriority.Priority": string;
  /** Format: character */
  "rowFilter.NWWSWarnPriority.ppcode": string;
  /** Format: character */
  "rowFilter.NWWSWarnPriority.svcode": string;
  /** Format: character varying */
  "rowFilter.NWWSWarnPriority.modifier": string;
  /** Format: character */
  "rowFilter.NWWSWarnPriority.pcolor": string;
}

export interface operations {}

export interface external {}
